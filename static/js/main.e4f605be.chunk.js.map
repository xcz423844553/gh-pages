{"version":3,"sources":["asset/post/2019-04-16-how-to-install-github-on-ubuntu.md","asset/post/2019-04-16-how-to-install-mysql-on-ubuntu.md","asset/post/2019-04-17-how-to-use-git.md","asset/post/2019-08-06-sql-study-notes.md","asset/post/20190806sqlstudynotes.md","component/PostList.js","component/Post.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","data","title","url","date","PostList","props","className","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","size","icon","to","description","React","Component","docs","doc1","doc2","doc3","doc4","doc5","Post","state","markdown","fetch","this","then","res","text","setState","style","margin","source","escapeHtml","Header","Layout","Footer","Content","App","theme","mode","defaultSelectedKeys","lineHeight","key","exact","path","component","render","match","params","textAlign","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4f605be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/2019-04-16-how-to-install-github-on-ubuntu.7d70522b.md\";","module.exports = __webpack_public_path__ + \"static/media/2019-04-16-how-to-install-mysql-on-ubuntu.8a89147c.md\";","module.exports = __webpack_public_path__ + \"static/media/2019-04-17-how-to-use-git.ffa93498.md\";","module.exports = __webpack_public_path__ + \"static/media/2019-08-06-sql-study-notes.f16a69c2.md\";","module.exports = __webpack_public_path__ + \"static/media/20190806sqlstudynotes.f16a69c2.md\";","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Breadcrumb, List, Avatar } from 'antd';\nimport { Link } from 'react-router-dom'\n\nconst data = [\n    {\n      title: 'How to Install Github on Ubuntu',\n      url: '2019-04-16-how-to-install-github-on-ubuntu',\n      date: '2019-04-16',\n    },\n    {\n      title: 'How to Install MySQL on Ubuntu',\n      url: '2019-04-16-how-to-install-mysql-on-ubuntu',\n      date: '2019-04-16',\n    },\n    {\n      title: 'How to Use Git',\n      url: '2019-04-17-how-to-use-git',\n      date: '2019-04-17',\n    },\n    {\n      title: 'SQL Study Notes',\n      url: '2019-08-06-sql-study-notes',\n      date: '2019-08-06',\n    },\n  ];\n\nexport class PostList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"postlist\">\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={data}\n                    renderItem={item => (\n                        <List.Item>\n                            <List.Item.Meta\n                                avatar={<Avatar size=\"small\" icon=\"star\" />}\n                                title={<Link to={`/post/${item.url}`}>{item.title}</Link>}\n                                description={item.date}\n                            />\n                        </List.Item>\n                    )}\n                />,\n            </div>\n        );\n    }\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport ReactMarkdown from 'react-markdown';\nimport doc1 from '../asset/post/2019-04-16-how-to-install-github-on-ubuntu.md';\nimport doc2 from '../asset/post/2019-04-16-how-to-install-mysql-on-ubuntu.md';\nimport doc3 from '../asset/post/2019-04-17-how-to-use-git.md';\nimport doc4 from '../asset/post/2019-08-06-sql-study-notes.md';\nimport doc5 from '../asset/post/20190806sqlstudynotes.md';\n\nlet docs = {};\ndocs['2019-04-16-how-to-install-github-on-ubuntu'] = doc1;\ndocs['2019-04-16-how-to-install-mysql-on-ubuntu'] = doc2;\ndocs['2019-04-17-how-to-use-git'] = doc3;\ndocs['2019-08-06-sql-study-notes'] = doc4;\ndocs['20190806sqlstudynotes'] = doc5;\n\nexport class Post extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            markdown: '',\n        }\n    }\n\n    componentDidMount() {\n        // const path = require('../asset/post/' + this.props.title + '.md');\n        // fetch(path)\n        //     .then(res => res.text())\n        //     .then(text => this.setState({ markdown: text }));\n        fetch(docs[this.props.title])\n            .then(res => res.text())\n            .then(text => this.setState({ markdown: text }));\n    }\n\n    render() {\n        return (\n            <div className=\"post\">\n                <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\n                </Breadcrumb>\n                <ReactMarkdown\n                    source={this.state.markdown}\n                    escapeHtml={true}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu } from 'antd';\nimport { PostList } from './PostList';\nimport { Post } from './Post';\nimport { Link, Route } from 'react-router-dom'\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header>\n            <div className=\"logo\" />\n            <Menu\n              theme=\"dark\"\n              mode=\"horizontal\"\n              defaultSelectedKeys={['2']}\n              style={{ lineHeight: '64px' }}\n            >\n              <Menu.Item key=\"1\"><Link to={`/`}>Home</Link></Menu.Item>\n              <Menu.Item key=\"2\"><Link to={`/postlist`}>Posts</Link></Menu.Item>\n              <Menu.Item key=\"3\"><Link to={`/project`}>Projects</Link></Menu.Item>\n            </Menu>\n          </Header>\n          <Content>\n          <Route exact path=\"/\" component={PostList} />\n            <Route exact path=\"/postlist\" component={PostList} />\n            <Route exact path=\"/post/:title\" render={({match}) => (\n              <Post title={match.params.title}/>\n            )} />\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Az</Footer>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}